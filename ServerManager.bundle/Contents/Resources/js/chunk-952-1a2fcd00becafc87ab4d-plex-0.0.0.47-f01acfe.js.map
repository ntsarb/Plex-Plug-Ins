{"version":3,"file":"js/chunk-952-1a2fcd00becafc87ab4d-plex-0.0.0.47-f01acfe.js","mappings":"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","sources":["webpack://server-manager/./app/js/views/v3/components/pages/serverUpdate/ReleaseNotesModal.tsx","webpack://server-manager/./app/js/views/v3/components/pages/serverUpdate/ReleaseNotesModal.css?0d4a","webpack://server-manager/./app/js/views/v3/components/pages/serverUpdate/ServerDownloadProgressBar.tsx","webpack://server-manager/./app/js/views/v3/components/pages/serverUpdate/ServerDownloadProgressBar.css?0ca1","webpack://server-manager/./app/js/views/v3/components/pages/serverUpdate/ServerUpdatePage.css?97b9","webpack://server-manager/./app/js/views/v3/components/pages/serverUpdate/ServerUpdatePageConnector.ts","webpack://server-manager/./app/js/views/v3/components/pages/serverUpdate/ServerUpdatePage.tsx","webpack://server-manager/./app/js/v4/features/serverUpdate/components/ServerUpdateViewPage.tsx"],"sourcesContent":["/* eslint-plugin-disable @typescript-eslint */\n\nimport React from 'react';\nimport * as metricsPages from 'app/js/utils/constants/metrics/metricsPages';\nimport t from 'app/js/utils/t';\nimport Modal from 'app/js/views/v3/components/core/modals/Modal';\nimport ModalBody from 'app/js/views/v3/components/core/modals/ModalBody';\nimport ModalContent from 'app/js/views/v3/components/core/modals/ModalContent';\nimport ModalHeader from 'app/js/views/v3/components/core/modals/ModalHeader';\nimport styles from './ReleaseNotesModal.css';\n\nfunction getReleaseNotesList(title: any, notes: any) {\n  const notesList = notes ? notes.split('\\n') : [];\n\n  return notesList.length > 0 ? (\n    <>\n      <div className={styles.listTitle}>{title}</div>\n      <ul>\n        {notesList.map((note: any, index: any) => {\n          return <li key={index}>{note}</li>;\n        })}\n      </ul>\n    </>\n  ) : null;\n}\n\ntype ReleaseNotesModalProps = {\n  version: string;\n  added?: string;\n  fixed?: string;\n  isOpen: boolean;\n  onClose: (...args: any[]) => any;\n};\n\nfunction ReleaseNotesModal(props: ReleaseNotesModalProps) {\n  const { version, added, fixed, isOpen, onClose } = props;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      metricsPage={metricsPages.RELEASE_NOTES}\n      onModalClose={onClose}\n    >\n      <ModalContent onModalClose={onClose}>\n        <ModalHeader>\n          {t('{product} Release Notes', { product: 'Plex Media Server' })}\n        </ModalHeader>\n        <ModalBody>\n          <div className={styles.version}>\n            {t('Version {version}', { version })}\n          </div>\n          {getReleaseNotesList(t('New'), added)}\n          {getReleaseNotesList(t('Fixes'), fixed)}\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nexport default ReleaseNotesModal;\n","// extracted by mini-css-extract-plugin\nexport default {\"version\":\"VcwnP\",\"listTitle\":\"mboFX\"};","/* eslint-plugin-disable @typescript-eslint */\n\nimport React from 'react';\nimport styles from 'app/js/views/v3/components/pages/serverUpdate/ServerDownloadProgressBar.css';\n\ntype ServerDownloadProgressBarProps = {\n  className?: string;\n  progress: number;\n};\n\nfunction ServerDownloadProgressBar({\n  progress,\n}: ServerDownloadProgressBarProps) {\n  return (\n    <div className={styles.progress}>\n      <div className={styles.emptyBar} />\n      <div\n        className={styles.bar}\n        style={{ transform: `translate3d(-${100 - progress}%, 0, 0)` }}\n      />\n    </div>\n  );\n}\n\nexport default ServerDownloadProgressBar;\n","// extracted by mini-css-extract-plugin\nexport default {\"progress\":\"_lMnm\",\"emptyBar\":\"osZkJ\",\"bar\":\"mGPbS\"};","// extracted by mini-css-extract-plugin\nexport default {\"link\":\"I9XR3\",\"actionContainer\":\"qhBUK BQ0Uf\",\"progressContainer\":\"dYS0R\"};","/* eslint-plugin-disable @typescript-eslint */\n\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { redirectToRoute } from 'app/js/stores/actions/appActions';\nimport {\n  dismissServerUpdate,\n  downloadServerUpdate,\n  installServerUpdate,\n} from 'app/js/stores/actions/serverUpdateActions';\nimport createServerFlexSelector from 'app/js/stores/selectors/server/createServerFlexSelector';\nimport selectCloudServer from 'app/js/stores/selectors/server/selectCloudServer';\nimport selectStableServer from 'app/js/stores/selectors/server/selectStableServer';\nimport shortVersion from 'app/js/utils/string/shortVersion';\nimport ServerUpdatePage from 'app/js/views/v3/components/pages/serverUpdate/ServerUpdatePage';\n\nexport function createMapStateToProps() {\n  return createSelector(\n    selectStableServer,\n    selectCloudServer,\n    createServerFlexSelector(),\n    (server, cloudServer, serverFlex) => {\n      const update = serverFlex.update;\n\n      return {\n        serverEntityID: server.entityID,\n        friendlyName: server.friendlyName,\n        state: update.state,\n        error: update.error,\n        progress: update.progress,\n        availableVersion: shortVersion(update.version),\n        currentVersion: shortVersion(server.version),\n        downloadURL: update.downloadURL || cloudServer.appsUrl,\n        added: update.added,\n        fixed: update.fixed,\n      };\n    }\n  );\n}\n\nfunction createMapDispatchToProps(dispatch: any, props: any) {\n  const { serverEntityID } = props;\n\n  return {\n    onDismissServerUpdate(version: any) {\n      dispatch(\n        dismissServerUpdate({\n          serverEntityID,\n          version,\n        })\n      );\n    },\n\n    onInstallServerUpdate() {\n      dispatch(installServerUpdate({ serverEntityID }));\n    },\n\n    onDownloadServerUpdate() {\n      dispatch(downloadServerUpdate({ serverEntityID }));\n    },\n\n    onRedirectToHome() {\n      dispatch(redirectToRoute({ route: 'home' }));\n    },\n  };\n}\n\nexport default connect(\n  createMapStateToProps,\n  createMapDispatchToProps\n)(ServerUpdatePage);\n","/* eslint-plugin-disable @typescript-eslint */\n\nimport React, { useCallback } from 'react';\nimport * as serverUpdateStates from 'app/js/utils/constants/serverUpdateStates';\nimport t from 'app/js/utils/t';\nimport TagInjector from 'app/js/views/v3/components/core/TagInjector';\nimport Button from 'app/js/views/v3/components/core/buttons/Button';\nimport Link from 'app/js/views/v3/components/core/buttons/Link';\nimport EmptyPage from 'app/js/views/v3/components/pages/empty/EmptyPage';\nimport EmptyPageDescription from 'app/js/views/v3/components/pages/empty/EmptyPageDescription';\nimport InstallingServerUpdatePageConnector from 'app/js/views/v3/components/pages/empty/InstallingServerUpdatePageConnector';\nimport ReleaseNotesModal from 'app/js/views/v3/components/pages/serverUpdate/ReleaseNotesModal';\nimport ServerDownloadProgressBar from 'app/js/views/v3/components/pages/serverUpdate/ServerDownloadProgressBar';\nimport useEffectOnce from 'app/js/views/v3/helpers/hooks/useEffectOnce';\nimport useModalState from 'app/js/views/v3/helpers/hooks/useModalState';\nimport * as kinds from 'app/js/views/v3/helpers/props/kinds';\nimport * as sizes from 'app/js/views/v3/helpers/props/sizes';\nimport pmsLogo from 'app/img/pms-logo.svg';\nimport styles from 'app/js/views/v3/components/pages/serverUpdate/ServerUpdatePage.css';\n\ntype ServerUpdatePageProps = {\n  serverEntityID: string;\n  friendlyName?: string;\n  state?: string;\n  error?: string;\n  progress?: number;\n  availableVersion?: string;\n  currentVersion?: string;\n  downloadURL?: string;\n  added?: string;\n  fixed?: string;\n  onDismissServerUpdate: (...args: any[]) => any;\n  onInstallServerUpdate: (...args: any[]) => any;\n  onDownloadServerUpdate: (...args: any[]) => any;\n  onRedirectToHome: (...args: any[]) => any;\n};\n\nfunction ServerUpdatePage(props: ServerUpdatePageProps) {\n  const {\n    serverEntityID,\n    friendlyName,\n    state,\n    error,\n    progress,\n    availableVersion,\n    currentVersion,\n    downloadURL,\n    added,\n    fixed,\n    onDismissServerUpdate,\n    onInstallServerUpdate,\n    onDownloadServerUpdate,\n    onRedirectToHome,\n  } = props;\n\n  // Once install has complete redirect to home.\n  const shouldRedirectToHome =\n    state === serverUpdateStates.NONE || state === serverUpdateStates.DONE;\n\n  const releaseNotesModalState = useModalState();\n\n  const onDismiss = useCallback(() => {\n    onDismissServerUpdate(availableVersion);\n  }, [availableVersion, onDismissServerUpdate]);\n\n  useEffectOnce(() => {\n    onRedirectToHome();\n  }, shouldRedirectToHome);\n\n  if (shouldRedirectToHome) {\n    return null;\n  }\n\n  if (state === serverUpdateStates.INSTALLING) {\n    return (\n      <InstallingServerUpdatePageConnector serverEntityID={serverEntityID} />\n    );\n  }\n\n  const title = t('Update available for {product}', {\n    product: 'Plex Media Server',\n  });\n\n  let description = t(\n    'You are currently running version {currentVersion} on the server \"{friendlyName}\". Version {availableVersion} is now available.',\n    { availableVersion, currentVersion, friendlyName }\n  );\n\n  if (state === serverUpdateStates.NOTIFY) {\n    description =\n      description +\n      ' ' +\n      t('This update will need to be installed manually after download.');\n  }\n\n  if (state === serverUpdateStates.ERROR) {\n    return (\n      <EmptyPage\n        description={\n          error ? error : t('Something went wrong, please try again later.')\n        }\n        iconSrc={pmsLogo}\n        title={title}\n      />\n    );\n  }\n\n  return (\n    <EmptyPage\n      description={\n        added || fixed ? (\n          <TagInjector\n            message={\n              description + ' ' + t('{openLink}Show release notes{closeLink}.')\n            }\n            tags={[\n              {\n                open: 'openLink',\n                close: 'closeLink',\n                component: Link,\n                onPress: releaseNotesModalState.onOpen,\n                kind: kinds.PRIMARY,\n              },\n            ]}\n          />\n        ) : (\n          description\n        )\n      }\n      iconSrc={pmsLogo}\n      title={t('Update available for {product}', {\n        product: 'Plex Media Server',\n      })}\n    >\n      {state === serverUpdateStates.AVAILABLE ? (\n        <div className={styles.actionContainer}>\n          <Button\n            kind={kinds.PRIMARY}\n            size={sizes.LARGE}\n            onPress={onDownloadServerUpdate}\n          >\n            {t('Download now')}\n          </Button>\n        </div>\n      ) : null}\n      {state === serverUpdateStates.DOWNLOADING ? (\n        <div className={styles.actionContainer}>\n          <div>{t('Downloading Update ({progress}%)', { progress })}</div>\n          {/* @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'number | undefined' is not assig... Remove this comment to see the full error message */}\n          {!isNaN(progress) ? (\n            <div className={styles.progressContainer}>\n              {/* @ts-expect-error ts-migrate(2322) FIXME: Type 'number | undefined' is not assignable to typ... Remove this comment to see the full error message */}\n              <ServerDownloadProgressBar progress={progress} />\n            </div>\n          ) : null}\n        </div>\n      ) : null}\n      {state === serverUpdateStates.DOWNLOADED ? (\n        <div className={styles.actionContainer}>\n          <Button\n            kind={kinds.PRIMARY}\n            size={sizes.LARGE}\n            onPress={onInstallServerUpdate}\n          >\n            {t('Install now')}\n          </Button>\n        </div>\n      ) : null}\n      {state === serverUpdateStates.NOTIFY ? (\n        <div className={styles.actionContainer}>\n          <Button\n            kind={kinds.PRIMARY}\n            size={sizes.LARGE}\n            target=\"_blank\"\n            to={downloadURL}\n            onPress={onDismiss}\n          >\n            {t('Download now')}\n          </Button>\n        </div>\n      ) : null}\n\n      {state !== serverUpdateStates.DOWNLOADING &&\n      state !== serverUpdateStates.DOWNLOADED ? (\n        <EmptyPageDescription>\n          <Link\n            className={styles.link}\n            kind={kinds.PRIMARY}\n            size={sizes.SMALL}\n            to=\"#\"\n            onPress={onDismiss}\n          >\n            {t('Skip this version')}\n          </Link>\n        </EmptyPageDescription>\n      ) : null}\n\n      <ReleaseNotesModal\n        added={added}\n        fixed={fixed}\n        isOpen={releaseNotesModalState.isOpen}\n        // @ts-expect-error ts-migrate(2322) FIXME: Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n        version={availableVersion}\n        onClose={releaseNotesModalState.onClose}\n      />\n    </EmptyPage>\n  );\n}\n\nexport default ServerUpdatePage;\n","import React, { ReactElement } from 'react';\nimport { useSelector } from 'react-redux';\nimport selectServer from 'app/js/v4/core/servers/selectors/selectServer';\nimport ServerPageConnector from 'app/js/views/v3/components/pages/ServerPageConnector';\nimport ServerUpdatePageConnector from 'app/js/views/v3/components/pages/serverUpdate/ServerUpdatePageConnector';\n\nexport default function ServerUpdateViewPage(): ReactElement {\n  const server = useSelector(selectServer);\n\n  return (\n    <ServerPageConnector serverEntityID={server.entityID}>\n      <ServerUpdatePageConnector serverEntityID={server.entityID} />\n    </ServerPageConnector>\n  );\n}\n"],"names":["getReleaseNotesList","title","notes","notesList","split","length","className","map","note","index","key","props","version","added","fixed","isOpen","onClose","Modal","metricsPage","metricsPages","onModalClose","ModalContent","ModalHeader","t","product","ModalBody","progress","style","transform","selectStableServer","selectCloudServer","createServerFlexSelector","server","cloudServer","serverFlex","update","serverEntityID","entityID","friendlyName","state","error","availableVersion","shortVersion","currentVersion","downloadURL","appsUrl","dispatch","route","onDismissServerUpdate","onInstallServerUpdate","onDownloadServerUpdate","onRedirectToHome","shouldRedirectToHome","serverUpdateStates","NONE","DONE","releaseNotesModalState","useModalState","onDismiss","useCallback","useEffectOnce","INSTALLING","InstallingServerUpdatePageConnector","description","NOTIFY","ERROR","EmptyPage","iconSrc","TagInjector","message","tags","open","close","component","Link","onPress","onOpen","kind","kinds","AVAILABLE","Button","size","sizes","DOWNLOADING","isNaN","DOWNLOADED","target","to","EmptyPageDescription","selectServer","ServerPageConnector","ServerUpdatePageConnector"],"sourceRoot":""}